version: '3.8'

services:
  # Nginx 反向代理和负载均衡
  nginx:
    image: nginx:alpine
    container_name: kooix-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - kooix-hajimi-1
      - kooix-hajimi-2
    networks:
      - kooix-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL 主数据库
  postgres:
    image: postgres:15-alpine
    container_name: kooix-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: kooix_hajimi
      POSTGRES_USER: kooix
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./config/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - postgres-logs:/var/log/postgresql
    networks:
      - kooix-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kooix -d kooix_hajimi"]
      interval: 30s
      timeout: 10s
      retries: 5
    sysctls:
      - kernel.shmmax=2147483648
      - kernel.shmall=524288
    command: |
      postgres
        -c max_connections=200
        -c shared_buffers=256MB
        -c effective_cache_size=1GB
        -c maintenance_work_mem=64MB
        -c checkpoint_completion_target=0.9
        -c wal_buffers=16MB
        -c default_statistics_target=100
        -c random_page_cost=1.1
        -c effective_io_concurrency=200
        -c work_mem=4MB
        -c min_wal_size=1GB
        -c max_wal_size=4GB
        -c log_statement=all
        -c log_destination=stderr
        -c logging_collector=on
        -c log_directory=/var/log/postgresql

  # Redis 缓存和消息队列
  redis:
    image: redis:7-alpine
    container_name: kooix-redis
    restart: unless-stopped
    command: |
      redis-server
        --appendonly yes
        --appendfsync everysec
        --maxmemory 512mb
        --maxmemory-policy allkeys-lru
        --tcp-keepalive 60
        --timeout 300
    volumes:
      - redis-data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - kooix-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # WARP 代理集群
  warp-1:
    image: caomingjun/warp
    container_name: kooix-warp-1
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=0
    environment:
      - WARP_SLEEP=2
      - GOST_ARGS=-L :1080
      - WARP_LICENSE_KEY=${WARP_LICENSE_KEY_1}
    volumes:
      - warp-data-1:/var/lib/cloudflare-warp
    networks:
      - kooix-network
    healthcheck:
      test: ["CMD", "curl", "--socks5-hostname", "127.0.0.1:1080", "https://cloudflare.com/cdn-cgi/trace"]
      interval: 60s
      timeout: 15s
      retries: 3

  warp-2:
    image: caomingjun/warp
    container_name: kooix-warp-2
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=0
    environment:
      - WARP_SLEEP=2
      - GOST_ARGS=-L :1080
      - WARP_LICENSE_KEY=${WARP_LICENSE_KEY_2}
    volumes:
      - warp-data-2:/var/lib/cloudflare-warp
    networks:
      - kooix-network
    healthcheck:
      test: ["CMD", "curl", "--socks5-hostname", "127.0.0.1:1080", "https://cloudflare.com/cdn-cgi/trace"]
      interval: 60s
      timeout: 15s
      retries: 3

  # 主应用实例 1
  kooix-hajimi-1:
    image: kooix-hajimi:latest
    container_name: kooix-hajimi-1
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      warp-1:
        condition: service_healthy
      warp-2:
        condition: service_healthy
    environment:
      # 服务标识
      - INSTANCE_ID=kooix-hajimi-1
      - NODE_NAME=node-1
      
      # 基础配置
      - GITHUB_TOKENS=${GITHUB_TOKENS}
      - HAJIMI_CHECK_MODEL=gemini-2.5-flash
      
      # 数据库配置
      - STORAGE_TYPE=postgres
      - STORAGE_POSTGRES_HOST=postgres
      - STORAGE_POSTGRES_PORT=5432
      - STORAGE_POSTGRES_USER=kooix
      - STORAGE_POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - STORAGE_POSTGRES_DATABASE=kooix_hajimi
      - STORAGE_POSTGRES_SSL_MODE=disable
      - STORAGE_POSTGRES_MAX_OPEN_CONNECTIONS=50
      - STORAGE_POSTGRES_MAX_IDLE_CONNECTIONS=10
      - STORAGE_POSTGRES_CONNECTION_MAX_LIFETIME=1h
      
      # Redis配置
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=0
      - REDIS_MAX_IDLE=10
      - REDIS_MAX_ACTIVE=100
      - REDIS_IDLE_TIMEOUT=240s
      
      # 网络配置 - 多代理轮换
      - PROXY=socks5://warp-1:1080,socks5://warp-2:1080
      
      # 扫描配置 - 生产级性能
      - SCANNER_WORKER_COUNT=20
      - SCANNER_SCAN_INTERVAL=30m
      - SCANNER_BATCH_SIZE=500
      
      # Web服务配置
      - WEB_ENABLED=true
      - WEB_PORT=8080
      - WEB_HOST=0.0.0.0
      - WEB_READ_TIMEOUT=30s
      - WEB_WRITE_TIMEOUT=30s
      
      # 速率限制配置 - 激进模式
      - RATE_LIMIT_REQUESTS_PER_MINUTE=120
      - RATE_LIMIT_BURST_SIZE=50
      - RATE_LIMIT_ADAPTIVE_ENABLED=true
      - RATE_LIMIT_SUCCESS_THRESHOLD=0.8
      - RATE_LIMIT_BACKOFF_MULTIPLIER=2.0
      - RATE_LIMIT_COOLDOWN_DURATION=5m
      
      # 验证器配置
      - VALIDATOR_WORKER_COUNT=10
      - VALIDATOR_TIMEOUT=60s
      - VALIDATOR_BATCH_SIZE=20
      
      # 日志配置
      - LOG_LEVEL=info
      - LOG_FORMAT=json
      - LOG_OUTPUT=stdout
      
      # 监控配置
      - METRICS_ENABLED=true
      - METRICS_PORT=9090
      - HEALTH_CHECK_ENABLED=true
      
      # 外部同步配置
      - GEMINI_BALANCER_SYNC_ENABLED=${GEMINI_BALANCER_SYNC_ENABLED:-false}
      - GEMINI_BALANCER_URL=${GEMINI_BALANCER_URL}
      - GEMINI_BALANCER_AUTH=${GEMINI_BALANCER_AUTH}
      - GPT_LOAD_SYNC_ENABLED=${GPT_LOAD_SYNC_ENABLED:-false}
      - GPT_LOAD_URL=${GPT_LOAD_URL}
      - GPT_LOAD_AUTH=${GPT_LOAD_AUTH}
      - GPT_LOAD_GROUP_NAME=${GPT_LOAD_GROUP_NAME}
      
    volumes:
      - app-data-1:/app/data
      - ./config/queries.txt:/app/queries.txt:ro
      - ./config/app/config.yaml:/app/config/config.yaml:ro
    networks:
      - kooix-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  # 主应用实例 2
  kooix-hajimi-2:
    image: kooix-hajimi:latest
    container_name: kooix-hajimi-2
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      warp-1:
        condition: service_healthy
      warp-2:
        condition: service_healthy
    environment:
      # 服务标识
      - INSTANCE_ID=kooix-hajimi-2
      - NODE_NAME=node-2
      
      # 复制实例1的所有环境变量...
      - GITHUB_TOKENS=${GITHUB_TOKENS}
      - HAJIMI_CHECK_MODEL=gemini-2.5-flash
      - STORAGE_TYPE=postgres
      - STORAGE_POSTGRES_HOST=postgres
      - STORAGE_POSTGRES_PORT=5432
      - STORAGE_POSTGRES_USER=kooix
      - STORAGE_POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - STORAGE_POSTGRES_DATABASE=kooix_hajimi
      - STORAGE_POSTGRES_SSL_MODE=disable
      - STORAGE_POSTGRES_MAX_OPEN_CONNECTIONS=50
      - STORAGE_POSTGRES_MAX_IDLE_CONNECTIONS=10
      - STORAGE_POSTGRES_CONNECTION_MAX_LIFETIME=1h
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=0
      - REDIS_MAX_IDLE=10
      - REDIS_MAX_ACTIVE=100
      - REDIS_IDLE_TIMEOUT=240s
      - PROXY=socks5://warp-1:1080,socks5://warp-2:1080
      - SCANNER_WORKER_COUNT=20
      - SCANNER_SCAN_INTERVAL=30m
      - SCANNER_BATCH_SIZE=500
      - WEB_ENABLED=true
      - WEB_PORT=8080
      - WEB_HOST=0.0.0.0
      - WEB_READ_TIMEOUT=30s
      - WEB_WRITE_TIMEOUT=30s
      - RATE_LIMIT_REQUESTS_PER_MINUTE=120
      - RATE_LIMIT_BURST_SIZE=50
      - RATE_LIMIT_ADAPTIVE_ENABLED=true
      - RATE_LIMIT_SUCCESS_THRESHOLD=0.8
      - RATE_LIMIT_BACKOFF_MULTIPLIER=2.0
      - RATE_LIMIT_COOLDOWN_DURATION=5m
      - VALIDATOR_WORKER_COUNT=10
      - VALIDATOR_TIMEOUT=60s
      - VALIDATOR_BATCH_SIZE=20
      - LOG_LEVEL=info
      - LOG_FORMAT=json
      - LOG_OUTPUT=stdout
      - METRICS_ENABLED=true
      - METRICS_PORT=9090
      - HEALTH_CHECK_ENABLED=true
      - GEMINI_BALANCER_SYNC_ENABLED=${GEMINI_BALANCER_SYNC_ENABLED:-false}
      - GEMINI_BALANCER_URL=${GEMINI_BALANCER_URL}
      - GEMINI_BALANCER_AUTH=${GEMINI_BALANCER_AUTH}
      - GPT_LOAD_SYNC_ENABLED=${GPT_LOAD_SYNC_ENABLED:-false}
      - GPT_LOAD_URL=${GPT_LOAD_URL}
      - GPT_LOAD_AUTH=${GPT_LOAD_AUTH}
      - GPT_LOAD_GROUP_NAME=${GPT_LOAD_GROUP_NAME}
      
    volumes:
      - app-data-2:/app/data
      - ./config/queries.txt:/app/queries.txt:ro
      - ./config/app/config.yaml:/app/config/config.yaml:ro
    networks:
      - kooix-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  # Prometheus 监控
  prometheus:
    image: prom/prometheus:latest
    container_name: kooix-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./config/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - kooix-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana 可视化
  grafana:
    image: grafana/grafana:latest
    container_name: kooix-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=${DOMAIN_NAME}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - kooix-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Loki 日志聚合
  loki:
    image: grafana/loki:latest
    container_name: kooix-loki
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./config/monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    networks:
      - kooix-network

  # Promtail 日志收集
  promtail:
    image: grafana/promtail:latest
    container_name: kooix-promtail
    restart: unless-stopped
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./config/monitoring/promtail.yml:/etc/promtail/config.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - nginx-logs:/var/log/nginx:ro
      - postgres-logs:/var/log/postgresql:ro
    networks:
      - kooix-network
    depends_on:
      - loki

networks:
  kooix-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data:
  postgres-logs:
  redis-data:
  app-data-1:
  app-data-2:
  warp-data-1:
  warp-data-2:
  prometheus-data:
  grafana-data:
  loki-data:
  nginx-logs: